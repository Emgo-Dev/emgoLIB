function toCapital(str="",lowAll=0){if(typeof str!=="string"){throw TypeError(`toCapital() requires first parameter to be a string. The data type of given value was ${typeof str}`)};if(typeof lowAll!=="number"){throw TypeError(`toCapital() requires second parameter to be a number. Default (0) ignores case of rest of string, on (1) de-capitalizes rest of string.`)};return str.slice(0,1).toUpperCase().concat((lowAll?str.slice(1).toLowerCase():str.slice(1)))};function toOrdinal(int){if(!["string","number"].includes(typeof int)){throw TypeError(`toOrdinal() requires first parameter to be a string or number. The data type of given value was ${typeof int}.`)};let digits=[(parseInt(int)%10),(parseInt(int)%100)];let pattern=[[1,2,3,4],["st","nd","rd","th"]];return pattern[0].includes(digits[0])&&(digits[1]<11||digits[1]>13)?int+pattern[1][digits[0]-1]:int+pattern[1][3]};function to12Hour(int){if(isNaN(parseInt(int))){throw TypeError(`to12Hour() requires first parameter to contain a usable number. The data of given value was ${int} and is Not-A-Number (NAN)}`)};let num=parseInt(int);return[0,12,24].includes(num)?12:num%12};function toMeridiem(int){if(!["string","number"].includes(typeof int)){throw TypeError(`toMeridiem() requires first parameter to be a string or number. The data type of given value was ${typeof int}.`)};if(isNaN(parseInt(int))){throw TypeError(`toMeridiem() requires first parameter to contain a usable number. The data of given value was ${int} and is Not-A-Number (NAN)}`)};let med=int<24?int>11?"pm":"am":"am";let num=parseInt(int);return[0,12,24].includes(num)?`12${med}`:`${num % 12}${med}`};function getMeridiem(str=""){if(!["string"].includes(typeof str)){throw TypeError(`getMeridiem() requires first parameter to be a string. The data type of given value was ${typeof str}.`)};return str.slice(str.search(["am","pm"].filter(r=>str.includes(r))[0]))};function toDigits(str=0,len=1,x=0){if(!["string"].includes(typeof str)){throw TypeError(`toDigits() requires first parameter to be a string. The data type of given value was ${typeof str}.`)};if(typeof str==="string")return str.slice(0,len);return[str.padStart(len,"0"),str.padEnd(len,"0")][x>0?1:0]};function setDigits(str=0,len=1,x=0){if(!["string"].includes(typeof str)){throw TypeError(`toDigits() requires first parameter to be a string. The data type of given value was ${typeof str}.`)};[str.padStart(str.length+len,"0"),str.padEnd(str.length+len,"0")][x>0?1:0]};function toLen(str="",len=0,fill="",newStr=""){if(!["string"].includes(typeof str)){throw TypeError(`toDigits() requires first parameter to be a string. The data type of given value was ${typeof str}.`)};let toStr="";for(let i=0;i<len;i++){if(i>=str.length)toStr=toStr+fill;else toStr=toStr+str[i]};return toStr};function setLen(str="",len=0,fill="",dir=1){if(!["string"].includes(typeof str)){throw TypeError(`toDigits() requires first parameter to be a string. The data type of given value was ${typeof str}.`)};for(let i=len;i>0;i--){str=dir<0?fill+str:str+fill};return str};function extend(str="",len=0,fill="",dir=1){if(!["string"].includes(typeof str)){throw TypeError(`toDigits() requires first parameter to be a string. The data type of given value was ${typeof str}.`)};for(let i=len;i>0;i--){str=dir<0?fill+str:str+fill};return str};function getDecimals(str=""){if(!["string","number"].includes(typeof str)){throw TypeError(`toWrittenNumb() requires first parameter to be a string or number. The data type of given value was ${typeof str}.`)};let decimal="";let foundDecimal=!1;for(let i=0;i<str.length;i++){if(foundDecimal)
decimal=decimal+str[i];if(str[i]===".")
if(foundDecimal)
decimal="";foundDecimal=!0};return decimal};function toWrittenNumb(int){if(!["string","number"].includes(typeof int)){throw TypeError(`toWrittenNumb() requires first parameter to be a string or number. The data type of given value was ${typeof int}.`)};let num=String(int%1<1&&int%1>0||int%1>-1&&int%1<0?parseFloat(int):parseInt(int));let decI=num.search("\\.");let isFloat=decI>-1?!0:!1;let isNegative=num<0?!0:!1;let wNum="";if(isFloat){wNum=wNum.concat(num.slice(decI).split("").reverse().join(""))};for(let a=isFloat?decI-1:num.length-1,b=0;isNegative?a>0:a>=0;a--,b++){if((b>0)&&((b%3)===0)){wNum=wNum.concat(",")};wNum=wNum.concat(num[a])};if(isNegative){wNum=wNum.concat("-")};return wNum.split("").reverse().join("")};function getIsoDate(str){str.match(/\w{4}-\w{2}-\w{2}/)[0]};function getIsoYear(str){str.match(/^\w{4}/)[0]};function getIsoMonth(str){str.match(/\w{2}(?=-\w{2}T)/)[0]};function getIsoDay(str){str.match(/\w{2}(?=T)/)[0]};function getIsoTime(str){str.match(/\w{2}:\w{2}:\w{2}/)[0]};function getIsoHour(str){str.match(/\w{2}(?=:)/)[0]};function getIsoMinute(str){str.match(/\w{2}(?=:\w{2}\.)/)[0]};function getIsoSecond(str){str.match(/\w{2}(?=\.)/)[0]}
