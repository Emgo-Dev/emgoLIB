// STYLESHEET OF TOOLS FOR EFFECTIVELY IMPLEMENTING FLEXBOX INTO A PROJECT

$start: flex-start; // STORE PROPER DATA VALUE FOR THE 'START' ALIGNMENT OF FLEXBOX
$end: flex-end; // STORE PROPER DATA VALUE FOR THE 'END' ALIGNMENT OF FLEXBOX
$center: center; // STORE DATA VALUE FOR CENTER ALIGNMENT OF FLEXBOX

// SCSS MIXIN FOR ASSIGNING BASE NECESSITIES TO DEFINE FLEXBOX PROPERTIES OF CONTAINER ELEMENT
@mixin flex( $flow, $flex ){
	display: flex;
	flex-flow: $flow;
	flex: $flex;
}

// SCSS MIXIN FOR ASSIGNING FLEXBOX ALIGNMENTS
@mixin flexJCI( $justify, $content, $items ){
	justify-content: $justify;
	align-content: $content;
	align-items: $items;
}

.FLX {
  display: flex;
  flex: auto 0 0;
  flex-flow: row;
  justify-content: flex-start;
  align-content: flex-start;
  align-items: flex-start;

  &-FR {
    @extend .FLX; flex-flow: row wrap;

    &-XS { justify-content: flex-start; }
    &-XC { justify-content: center; }
    &-XE { justify-content: flex-end; }
    &-YS { align-content: flex-start; }
    &-YC { align-content: center; }
    &-YE { align-content: flex-end; }
  }

  &-FC {
    @extend .FLX; flex-flow: column;

    &-XS { align-items: flex-start; }
    &-XC { align-items: center; }
    &-XE { align-items: flex-end; }
    &-YS { justify-content: flex-start; }
    &-YC { justify-content: center; }
    &-YE { justify-content: flex-end; }
  }

  &-SiGr { flex: auto 1 1; }
  &-SiSh { flex-grow: 0; }
  &-SiGr { flex-shrink: 0; }
  &-SiF { flex: 100% 1 1; }
  &-SiH { flex: 40% 1 1; }

  &-SpE { justify-content: space-evenly; }
  &-SpB { justify-content: space-between; }
  &-SpA { justify-content: space-around; }
}
